function makeNestedCall(sheet, nestedCalls, fileName, str, indent){
  for (var i = 0; i < nestedCalls.length; i++) {
    str += makeCall(sheet, nestedCalls[i], 0, '', fileName)
    if(Array.isArray(nestedCalls[i+1])){
      return str += makeNestedCall(sheet, nestedCalls[i+1], fileName, '', 0) + '\n});\n';
    } else {
      str += '\n});\n'
    }
  }
  return str;
}

function makeLinearCalls(sheet, linearCalls, fileName){
  var res = '';
  for (var i = 0; i < linearCalls.length; i++) {
    res += makeCall(sheet, linearCalls[i], 0, '', fileName) + '\n});\n'
  };
  return res;
}

function makeCall(sheet, scheme, indent, res, fileName) {
  return res.concat('  '.repeat(indent) + scheme.objectsUnderTest[0],
    '.' + getValue(sheet, scheme.methodsUnderTest),
    '.call(' + scheme.objectsUnderTest[0] + getCallInputs(sheet, scheme)
      + ', function(err, data){\n'
      + '  '.repeat(indent + 1)
      + 'if(err)'
      + '  ' + 'return(err, null);\n'
      + '  '.repeat(indent + 1)
      + 'makeComparisonAndWriteResult('
      + scheme.outputs
      + ', data, '
      + '\'' + getValue(sheet, scheme.invocations, true) + '\'' + ', '
      + '\'' + getValue(sheet, scheme.objectsUnderTest) + ' ' + getValue(sheet, scheme.methodsUnderTest)+ '\', ' + '\'' + fileName +'\', '+ '\'' + scheme.outputs + '\'' + ');\n'
      + '  '.repeat(indent + 1)
      + scheme.outputs
      + ' = data;\n');
};
